SET SERVEROUTPUT ON;
SET VERIFY OFF;
/* 1. GETADINA izeneko funtzio bat sortu, sarrerako parametro bezala data bat 
jasotzen duena, eta data horretan jaiotako pertsona baten adina bueltatzen duena. */
CREATE OR REPLACE FUNCTION GETADINA(JAIOTZEDATA DATE) RETURN PLS_INTEGER AS 
    ADINA PLS_INTEGER;
BEGIN
    ADINA := FLOOR(MONTHS_BETWEEN(SYSDATE, JAIOTZEDATA) /12);
    RETURN ADINA;
END;
/
--Froga
BEGIN
    DBMS_OUTPUT.PUT_LINE('ADINA: ' || GETADINA('10/09/1983'));
END;
/
/* 2. Sortu LANGILEAKBISTARATU izeneko prozedura bat langile guztien informazioa
bistaratzen duena, langile kodeagaitik ordenatuta. Erakutsi beharreko datuak: kodea,
izena, jaiotze data eta adina (aurreko ariketan sortutako funtzioa erabili behar da).
Datuak tabulatuta bistaratu behar dira. */
CREATE OR REPLACE PROCEDURE LANGILEAKBISTARATU AS
    CURSOR CLANGILEAK IS SELECT * FROM LANGILEAK ORDER BY KODEA;
BEGIN
    FOR LANGILE IN CLANGILEAK
    LOOP
        DBMS_OUTPUT.PUT_LINE(RPAD(LANGILE.KODEA,10,' ') || ' ' || RPAD(LANGILE.IZENA,30,' ') || ' ' || RPAD(TO_CHAR(LANGILE.JAIOTZEDATA,'DD/MM/YYYY'),15,' ') || ' ' || GETADINA(LANGILE.JAIOTZEDATA));
    END LOOP;
END;
/
--Froga
EXECUTE LANGILEAKBISTARATU;
/* 3. Sortu bloke anonimo bat erabiltzaileari zirkulu baten erradioa eskatzen diona
eta pantailan bere diametroa, perimetroa eta azalera erakusten duena */
DECLARE
  ERRADIOA NUMBER := &ERRADIO;
  DIAMETROA NUMBER;
  PERIMETROA NUMBER;
  AZALERA NUMBER;
BEGIN  
  DIAMETROA := ERRADIOA * 2;
  PERIMETROA := 2 * 3.14 * ERRADIOA;
  AZALERA := 3.14 * ERRADIOA * ERRADIOA;
  DBMS_OUTPUT.PUT_LINE('Diametroa: ' || DIAMETROA);
  DBMS_OUTPUT.PUT_LINE('Perimetroa: ' || PERIMETROA);
  DBMS_OUTPUT.PUT_LINE('Azalera: ' || AZALERA);
END;
/
/* 4. Triangelu baten azalera kalkulatzen duen funtzioa sortu. Triangeluaren oinarria
eta altuera funtzioaren sarrerako parametroak izango dira */
CREATE OR REPLACE FUNCTION GETTRIANGELUAZALERA (OINARRIA NUMBER, ALTUERA NUMBER) RETURN NUMBER AS
  AZALERA NUMBER;
BEGIN  
  AZALERA := OINARRIA * ALTUERA / 2;
  RETURN AZALERA;
END;
/
--Froga
BEGIN
    DBMS_OUTPUT.PUT_LINE('AZALERA: ' || GETTRIANGELUAZALERA(10,5));
END;
/
/* 5. Prozedura bat sortu zenbaki oso bat jasotzen duena, eta zenbaki oso hori baino
txikiagoak diren zenbaki lehenak (primos) bistaratzen dituena */
CREATE OR REPLACE PROCEDURE ERAKUTSILEHENAK (ZBK NUMBER)
IS
  LEHENADA BOOLEAN;
BEGIN
  FOR I IN 2..ZBK-1 LOOP
    LEHENADA := TRUE;
    FOR J IN 2..I-1 LOOP
      IF MOD(I, J) = 0 THEN
        LEHENADA := FALSE;
        EXIT;
      END IF;
    END LOOP;
    IF LEHENADA THEN
      DBMS_OUTPUT.PUT_LINE(I);
    END IF;
  END LOOP;
END;
/
--Froga
EXECUTE ERAKUTSILEHENAK(41);
/* 6. Sortu funtzio bat langile baten izena jasotzen duena eta langile horren 
eginkizuna bueltatzen duena. Langilea ez bada existitzen hurrengo errorea jaurti
beharko du: "Datu-basean ez dago kode hori duen langilerik" */
CREATE OR REPLACE FUNCTION GETLANGILEEGINKIZUNA(LANGILEIZENA LANGILEAK.IZENA%TYPE) RETURN LANEAN.EGINKIZUNA%TYPE IS
    EGINKIZUNA LANEAN.EGINKIZUNA%TYPE;
BEGIN
    SELECT L.EGINKIZUNA INTO EGINKIZUNA
    FROM LANEAN L, LANGILEAK LA
    WHERE LA.KODEA = L.LANGILE_KODEA
    AND LA.IZENA = LANGILEIZENA;
    RETURN EGINKIZUNA;
EXCEPTION
    WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR(-20010,'Datu-basean ez dago kode hori duen langilerik');
END;
/
-- Froga
BEGIN
    DBMS_OUTPUT.PUT_LINE('EGINKIZUNA: ' || GETLANGILEEGINKIZUNA('Juan Ignacio Martinez'));
    DBMS_OUTPUT.PUT_LINE('EGINKIZUNA: ' || GETLANGILEEGINKIZUNA('San Jorge'));
END;
/
/* 7. Idatzi bloke anonimo bat, 1etik 100era bitarteko zenbakiak inprimatzen dituena,
baina 3 zenbakiaren multiploetarako "Fizz" inprimatzen duena zenbakiaren ordez eta 
5 zenbakiaren multiploetarako "Buzz" inprimatzen duena. Bien multiploak diren 
zenbakietarako (hau da, 3 eta 5en multiploak), "FizzBuzz" inprimatzen du. */
DECLARE
  I NUMBER := 1;
BEGIN
  WHILE I <= 100 LOOP
    IF MOD(I, 3) = 0 AND MOD(I, 5) = 0 THEN
      DBMS_OUTPUT.PUT_LINE('FizzBuzz');
    ELSIF MOD(I, 3) = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Fizz');
    ELSIF MOD(I, 5) = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Buzz');
    ELSE
      DBMS_OUTPUT.PUT_LINE(I);
    END IF;
    I := I + 1;
  END LOOP;
END;
/
BEGIN
    FOR I IN 1..100 
    LOOP
        IF MOD(I, 3) = 0 AND MOD(I, 5) = 0 THEN
          DBMS_OUTPUT.PUT_LINE('FizzBuzz');
        ELSIF MOD(I, 3) = 0 THEN
          DBMS_OUTPUT.PUT_LINE('Fizz');
        ELSIF MOD(I, 5) = 0 THEN
          DBMS_OUTPUT.PUT_LINE('Buzz');
        ELSE
          DBMS_OUTPUT.PUT_LINE(I);
        END IF;        
    END LOOP;
END;
/
/* 8 */
CREATE OR REPLACE PROCEDURE ATXIKIPENAEGUNERATU(LANGILEKODEA LANGILEAK.KODEA%TYPE) AS
    ATXIKIPENA LANGILEAK.ATXIKIPENA%TYPE;
    SEMEALABAK LANGILEAK.SEMEALABAK%TYPE;
    DIRUSARRERA2007 NUMBER;
    ATXIKIPENBERRIA LANGILEAK.ATXIKIPENA%TYPE;
    ATXIKIPENALDEHANDIA EXCEPTION;
BEGIN
    SELECT ATXIKIPENA, SEMEALABAK INTO ATXIKIPENA, SEMEALABAK 
    FROM LANGILEAK WHERE KODEA = LANGILEKODEA;
    
    SELECT SUM(DIRUSARRERA) INTO DIRUSARRERA2007 FROM NOMINAK WHERE URTEA=2007 AND LANGILE_KODEA = LANGILEKODEA;
    
    CASE SEMEALABAK
        WHEN 0 THEN ATXIKIPENBERRIA := 15;
        WHEN 1 THEN ATXIKIPENBERRIA := 14;
        WHEN 2 THEN ATXIKIPENBERRIA := 13;
        ELSE ATXIKIPENBERRIA := 12;
    END CASE;
    
    IF DIRUSARRERA2007 IS NOT NULL THEN
        IF DIRUSARRERA2007 < 15000 THEN
            ATXIKIPENBERRIA := ATXIKIPENBERRIA - 1;
        END IF;        
        IF (ATXIKIPENBERRIA > (ATXIKIPENA + 2)) OR (ATXIKIPENBERRIA < (ATXIKIPENA - 2)) THEN
            RAISE ATXIKIPENALDEHANDIA;
        END IF;
    ELSE
        ATXIKIPENBERRIA := 2;
    END IF;
    
    UPDATE LANGILEAK SET ATXIKIPENA = ATXIKIPENBERRIA WHERE KODEA = LANGILEKODEA;
    
    COMMIT;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('Ez da existitzen langile kode hori duen langilerik');
    WHEN ATXIKIPENALDEHANDIA THEN 
        BEGIN
            DBMS_OUTPUT.PUT_LINE('Eguneratu beharreko eta orain daukan atxikipenaren artea alde handia dago');
            RAISE ATXIKIPENALDEHANDIA;
        END;
END;
-- Froga
EXECUTE ATXIKIPENAEGUNERATU(1);
EXECUTE ATXIKIPENAEGUNERATU(2);
EXECUTE ATXIKIPENAEGUNERATU(11);
EXECUTE ATXIKIPENAEGUNERATU(2341);
/* 9 */
CREATE OR REPLACE PROCEDURE SALTZAILEATXIKIPENAEGUNERATU AS
    CURSOR CLANGILE IS SELECT * FROM LANGILEAK L, LANEAN LA WHERE L.KODEA = LA.LANGILE_KODEA AND EGINKIZUNA = 'Saltzailea';
    AZKENKODEA LANGILEAK.KODEA%TYPE;
BEGIN
    FOR LANGILE IN CLANGILE
    LOOP
        AZKENKODEA := LANGILE.KODEA;
        ATXIKIPENAEGUNERATU(LANGILE.KODEA);
    END LOOP;
EXCEPTION 
    WHEN OTHERS THEN RAISE_APPLICATION_ERROR(-20100, AZKENKODEA || ' KODEA DUEN LANGILEAREN EGUNERAKETAK ERROREA EMAN DU');
END;
-- FROGA
EXECUTE SALTZAILEATXIKIPENAEGUNERATU;
SELECT SUM(DIRUSARRERA) FROM NOMINAK WHERE URTEA=2007 AND LANGILE_KODEA = 1;
SELECT * FROM LANGILEAK L, LANEAN LA WHERE L.KODEA = LA.LANGILE_KODEA AND EGINKIZUNA = 'Saltzailea';
/
/* 10 */
CREATE TABLE LANGILENAGUSIAK (
    KODEA NUMBER(5) PRIMARY KEY,
    IZENA VARCHAR2(30) NOT NULL,
    JAIOTZEDATA DATE
);

DECLARE
    CURSOR CLANGILE IS SELECT KODEA, IZENA, JAIOTZEDATA FROM LANGILEAK WHERE GETADINA(JAIOTZEDATA) > 60;
BEGIN    
    FOR LANGILE IN CLANGILE
    LOOP
        INSERT INTO LANGILENAGUSIAK VALUES (LANGILE.KODEA, LANGILE.IZENA, LANGILE.JAIOTZEDATA);
    END LOOP;    
    COMMIT;
END;

/* BEGIN    
    INSERT INTO LANGILENAGUSIAK SELECT KODEA, IZENA, JAIOTZEDATA FROM LANGILEAK WHERE GETADINA(JAIOTZEDATA) > 60;    
    COMMIT;
END; */

/* 11 */
CREATE OR REPLACE TRIGGER TRIGLANGILENAGUSIAK 
   AFTER INSERT ON LANGILEAK
   FOR EACH ROW
BEGIN
    IF GETADINA(:NEW.JAIOTZEDATA) > 60 THEN
        INSERT INTO LANGILENAGUSIAK VALUES (:NEW.KODEA, :NEW.IZENA, :NEW.JAIOTZEDATA);  
    END IF;
END ;
/
-- Froga
INSERT INTO LANGILEAK VALUES (222,'San Jorge',1,10,'12342233121122334454',TO_DATE('20/05/1990','DD/MM/YYYY'));
INSERT INTO LANGILEAK VALUES (223,'San Jorge',1,10,'12342233121122334456',TO_DATE('25/04/1950','DD/MM/YYYY'));

